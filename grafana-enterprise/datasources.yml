apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: grafana-enterprise
data: # use the deletes.yaml if you end up with an old provisioned datasource that you can't delete from the UI
  deletes.yaml: |
    apiVersion: 1
    deleteDatasources:
      - name: "Prometheus"
        orgId: 1
      - name: "Loki"
        orgId: 1
  tempo.yaml: |
    apiVersion: 1
    datasources:
      - name: Tempo
        type: tempo
        uid: tempo
        access: proxy
        orgId: 1
        url: http://tempo.tempo.svc.cluster.local:3100
        basicAuth: false
        isDefault: false
        version: 1
        editable: false
        apiVersion: 1
        jsonData:
          tracesToLogs:
            datasourceUid: loki
            tags: ['job']
  prometheus.yaml: |
    apiVersion: 1
    datasources:
      - name: GEM
        type: prometheus
        uid: gem
        access: proxy
        orgId: 1
        url: ${GEM_READ_URL}
        basicAuth: true
        basicAuthUser: ${GEM_READ_USERNAME}
        basicAuthPassword: ${GEM_READ_PASSWORD}
        isDefault: false
        version: 1
        editable: false
        apiVersion: 1
  loki.yaml: |
    apiVersion: 1
    datasources:
      - name: GEL
        type: loki
        uid: gel
        access: proxy
        orgId: 1
        url: ${GEL_READ_URL}
        basicAuth: true
        basicAuthUser: ${GEL_READ_USERNAME}
        basicAuthPassword: ${GEL_READ_PASSWORD}
        isDefault: false
        version: 1
        editable: false
        apiVersion: 1
        jsonData:
          derivedFields:
          - datasourceUid: tempo
            matcherRegex: .*(?:tempo_trace_id=|tempo_trace_id\":\s*\")(.*?)(?:\"|\s).*
            name: "TempoTraceId"
            url: "$${__value.raw}"
          - datasourceUid: tempo
            matcherRegex: (?:traceID|trace_id)=(\w+)
            name: "TraceID"
            url: $${__value.raw}