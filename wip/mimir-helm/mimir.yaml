multitenancy_enabled: false

limits: {}

activity_tracker:
  filepath: /data/metrics-activity.log

alertmanager:
  data_dir: '/data'
  enable_api: true
  external_url: '/alertmanager'
alertmanager_storage:
  backend: s3
  s3:
    endpoint: minio.minio.svc.cluster.local:9000
    bucket_name: mimir-alertmanager
    access_key_id: minio
    secret_access_key: minio123
    insecure: true

frontend_worker:
  frontend_address: mimir-query-frontend-headless.mimir.svc:9095

ruler:
  enable_api: true
  rule_path: '/data'
  alertmanager_url: dnssrvnoa+http://_http-metrics._tcp.mimir-alertmanager-headless.mimir.svc.cluster.local/alertmanager

server:
  grpc_server_max_recv_msg_size: 104857600
  grpc_server_max_send_msg_size: 104857600
  grpc_server_max_concurrent_streams: 1000

frontend:
  log_queries_longer_than: 10s
  align_queries_with_step: true

compactor:
  data_dir: "/data"

ingester:
  ring:
    final_sleep: 0s
    num_tokens: 512

ingester_client:
  grpc_client_config:
    max_recv_msg_size: 104857600
    max_send_msg_size: 104857600

runtime_config:
  file: /var/mimir/runtime.yaml

memberlist:
  abort_if_cluster_join_fails: false
  compression_enabled: false
  join_members:
  - mimir-gossip-ring

# This configures how the store-gateway synchronizes blocks stored in the bucket. It uses Minio by default for getting started (configured via flags) but this should be changed for production deployments.
blocks_storage:
  backend: s3
  tsdb:
    dir: /data/tsdb
  bucket_store:
    sync_dir: /data/tsdb-sync
  s3:
    endpoint: minio.minio.svc.cluster.local:9000
    bucket_name: mimir-data
    access_key_id: minio
    secret_access_key: minio123
    insecure: true
ruler_storage:
  backend: s3
  s3:
    endpoint: minio.minio.svc.cluster.local:9000
    bucket_name: mimir-ruler
    access_key_id: minio
    secret_access_key: minio123
    insecure: true